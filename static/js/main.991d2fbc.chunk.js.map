{"version":3,"sources":["components/Header.js","components/Home.js","components/DrawFront.js","components/DrawBack.js","components/JournalEntry.js","components/Assessments.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","exact","to","Home","Component","DrawFront","DrawBack","JournalEntry","Form","Group","controlId","Label","Control","placeholder","as","rows","Assessments","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAgBeA,G,MAbA,kBACb,gCACE,0BAAMC,UAAU,YAAW,uBAAGA,UAAU,kBAAb,SAC3B,wBAAIA,UAAU,YACZ,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,eACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,aAAZ,cACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,iBAAZ,kBACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,oB,wCCOKC,E,iLAbX,OACE,yBAAKH,UAAU,qBACb,2CACA,2DAAgC,mDAAhC,KACA,2DAEA,kC,GATWI,aCOJC,EAPG,kBACd,yBAAKL,UAAU,gBACb,gEACA,sFCsCSM,EAlCE,kBACb,yBAAKN,UAAU,gBACb,+DACA,qF,OCSSO,EAjBM,kBACjB,yBAAKP,UAAU,gBACb,6CACA,2CACA,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpB,kBAACF,EAAA,EAAKG,MAAN,iJACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,YAAY,YAAYC,GAAG,WAAWC,KAAK,OAE3D,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpB,kBAACF,EAAA,EAAKG,MAAN,qEACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,YAAY,qBAAqBC,GAAG,WAAWC,KAAK,UC2B7DC,G,8BA9BK,kBAClB,yBAAKhB,UAAU,wBACb,yBAAKA,UAAU,uBACb,2CAEA,wBAAIA,UAAU,cACZ,4BAAI,kBAAC,IAAD,CAASE,GAAG,KAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,WACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,WAIR,4GCKWe,EAbH,kBACV,kBAAC,IAAD,KACE,yBAAKjB,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACiB,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,aAAaC,UAAWd,IACpC,kBAAC,IAAD,CAAOa,KAAK,YAAYC,UAAWb,IACnC,kBAAC,IAAD,CAAOY,KAAK,gBAAgBC,UAAWZ,IACvC,kBAAC,IAAD,CAAOW,KAAK,eAAeC,UAAWH,OCdxBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.991d2fbc.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = () => (\n  <header>\n    <span className=\"icn-logo\"><i className=\"material-icons\">Icon</i></span>\n    <ul className=\"main-nav\">\n      <li><NavLink exact to=\"/\">Home</NavLink></li>\n      <li><NavLink to=\"/drawFront\">Draw Front</NavLink></li>\n      <li><NavLink to=\"/drawBack\">Draw Back</NavLink></li>\n      <li><NavLink to=\"/journalEntry\">Journal Entry</NavLink></li>\n      <li><NavLink to=\"/assessments\">Assessments</NavLink></li>\n    </ul>    \n  </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Home extends Component {    \n  \n  render() {\n    return (\n      <div className=\"main-content home\">\n        <h1>Soma Sketch</h1>\n        <p>This could be the splash page<em>Single Page Web App</em>.</p>\n        <p>We can put our homepage here</p>\n        \n        <hr />\n        \n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\n\nconst DrawFront = () => (\n    <div className=\"main-content\">\n      <h2>Draw How You Feel From The Front</h2>\n      <p>There will be a front image on this page and a canvas</p>\n    </div>\n  );\n\nexport default DrawFront;","import React, { Component} from 'react';\n// import {\n//   AppRegistry,\n//   StyleSheet,\n//   Text,\n//   View,\n//   Alert,\n// } from 'react-native';\n\nconst DrawBack = () => (\n    <div className=\"main-content\">\n      <h2>Draw How You Feel From the Back</h2>\n      <p>There will be a back image on this page and a canvas</p>\n\n      \n    </div>\n  );\n\n\n\n// export default class DrawBack extends Component {\n//   render() {\n//     return (\n//       <View style={styles.container}>\n//         <View style={{ flex: 1, flexDirection: 'row' }}>\n//           <SketchCanvas\n//             style={{ flex: 1 }}\n//             strokeColor={'red'}\n//             strokeWidth={7}\n//           />\n//         </View>\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF',\n//   },\n// });\n\n\nexport default DrawBack;","import React from 'react';\nimport Form from 'react-bootstrap/Form';\n\n\nconst JournalEntry = () => (\n    <div className=\"main-content\">\n      <h2>Journal Entry</h2>\n      <p>Today's Date</p>\n      <Form >\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>How are you feeling today? Describe your physical and mental state. List any emotions or sensations, both comfortable or uncomfortable .</Form.Label>\n          <Form.Control placeholder=\"I feel...\" as=\"textarea\" rows=\"3\" />\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>List three things you did well today or are gratefulÂ for:</Form.Label>\n          <Form.Control placeholder=\"I am happy that...\" as=\"textarea\" rows=\"3\" />\n        </Form.Group>\n      </ Form>\n    </div>\n  );\n\nexport default JournalEntry;","import React from 'react';\nimport {Route, NavLink, Redirect, BrowserRouter} from 'react-router-dom';\nimport Header from './Header';\n\n\n//Import Assessments\nimport PHQ_15 from './assessments/PHQ_15';\nimport ACEs from './assessments/ACEs';\nimport DASS_21 from './assessments/DASS_21';\nimport OLBI from './assessments/OLBI';\nimport GAD_7 from './assessments/GAD_7';\n\nconst Assessments = () => (\n  <div className=\"main-content courses\">\n    <div className=\"course-header group\">\n      <h2>Assessments</h2> \n      \n      <ul className=\"course-nav\">\n        <li><NavLink to='#'>DASS-21</NavLink></li>\n        <li><NavLink to='#'>PHQ-15</NavLink></li>\n        <li><NavLink to='#'>GAD-7</NavLink></li>\n        <li><NavLink to='#'>ACEs</NavLink></li>\n        <li><NavLink to='#'>OLBI</NavLink></li>\n      </ul>\n      \n    </div>\n    <p>I'll figure out how to convert the assments that were previously made here</p>\n    {/* Write routes here... */}\n    {/* <BrowserRouter>\n    <div className=\"container\">\n      <Header />\n        <Route exact path=\"/Assessments\"> render={ () => <Redirect to = \"/Assessments\" />} </Route>\n        <Route path=\"/assessments/DASS_21\" component={DASS_21} />\n        <Route path=\"/assessments/GAD_7\" component={GAD_7} />\n        <Route path=\"/assessments/ACES\" component={ACEs} />\n        <Route path=\"/assessments/PHQ_15\" component={PHQ_15} />\n        <Route path=\"/assessments/OLBI\" component={OLBI} />\n    </div>\n  </BrowserRouter> */}\n  </div>\n);\n\nexport default Assessments;","import React, { Component } from 'react';\nimport{\n  BrowserRouter,\n  Route\n} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import logo from '../logo.svg';\n\n  // App Components\n\nimport Header from './Header';\nimport Home from './Home';\nimport DrawFront from './DrawFront';\nimport DrawBack from './DrawBack';\nimport JournalEntry from './JournalEntry';\nimport Assessments from './Assessments';\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"container\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/drawFront\" component={DrawFront} />\n      <Route path=\"/drawBack\" component={DrawBack} />\n      <Route path=\"/journalEntry\" component={JournalEntry} />\n      <Route path=\"/assessments\" component={Assessments} />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}